window.SIDEBAR_ITEMS = {"attr":[["bevy_main",""],["reflect_trait",""]],"derive":[["Actionlike",""],["AmbiguitySetLabel","Generates an impl of the `AmbiguitySetLabel` trait."],["Bundle",""],["Component",""],["Deref","Implements `Deref` for single-item structs. This is especially useful when utilizing the newtype pattern."],["DerefMut","Implements `DerefMut` for single-item structs. This is especially useful when utilizing the newtype pattern."],["Deserialize",""],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type."],["Reflect",""],["RunCriteriaLabel","Generates an impl of the `RunCriteriaLabel` trait."],["Serialize",""],["StageLabel","Generates an impl of the `StageLabel` trait."],["SystemLabel","Generates an impl of the `SystemLabel` trait."]],"enum":[["AlignContent","Defines how each line is aligned within the flexbox."],["AlignItems","How items are aligned according to the cross axis"],["AlignSelf","Works like [`AlignItems`] but applies only to a single item"],["AlphaMode","Alpha mode"],["AssetEvent","Events that involve assets of type `T`."],["ClashStrategy","How should clashing inputs by handled by an [`InputMap`]?"],["Color",""],["CoreStage","The names of the default [`App`] stages."],["CursorIcon","The icon to display for a window’s cursor."],["Direction","Defines the text direction"],["Display","Whether to use a Flexbox layout model."],["EulerRot","Euler rotation sequences."],["FileDragAndDrop","Events related to files being dragged and dropped on a window."],["FlexDirection","Defines how flexbox items are ordered within a flexbox"],["FlexWrap","Defines if flexbox items appear on a single line or on multiple lines"],["GamepadAxisType",""],["GamepadButtonType",""],["GamepadEventType",""],["HorizontalAlign","Describes horizontal alignment preference for positioning & bounds."],["Interaction","Describes what type of input interaction has occurred for a UI node."],["JustifyContent","Defines how items are aligned according to the main axis"],["KeyCode","The key code of a `KeyboardInput`."],["Modifier","A keyboard modifier that combines two [`KeyCode`] values into one representation."],["MonitorSelection","Defines which monitor to use."],["MouseButton","A button on a mouse device."],["MouseWheelAxisType","The direction of motion of the mouse wheel."],["MouseWheelDirection","A buttonlike-input triggered by `MouseWheel` events"],["Overflow","Whether to show or hide overflowing items"],["PlaybackState","Playback status of a currently playing sound."],["PositionType","The strategy used to position this node"],["StartupStage","The names of the default [`App`] startup stages."],["TextError",""],["UserInput","Some combination of user input, which may cross [`Input`]-mode boundaries"],["Val","An enum that describes possible types of value in flexbox layout options"],["VerticalAlign","Describes vertical alignment preference for positioning & bounds. Currently a placeholder for future functionality."],["WindowPosition","Defines where window should be placed at on creation."]],"fn":[["default","An ergonomic abbreviation for [`Default::default()`] to make initializing structs easier. This is especially helpful when combined with “struct update syntax”."],["despawn_with_children_recursive","Function for despawning an entity and all its children"]],"macro":[["debug","Constructs an event at the debug level."],["debug_span","Constructs a span at the debug level."],["error","Constructs an event at the error level."],["error_span","Constructs a span at the error level."],["info","Constructs an event at the info level."],["info_span","Constructs a span at the info level."],["trace","Constructs an event at the trace level."],["trace_span","Constructs a span at the trace level."],["warn","Constructs an event at the warn level."],["warn_span","Constructs a span at the warn level."]],"mod":[["shape","Generation for some primitive shape meshes."]],"struct":[["ActionState","Stores the canonical input-method-agnostic representation of the inputs received"],["ActionStateDriver","A component that allows the attached entity to drive the [`ActionState`] of the associated entity"],["AddChild","Command that adds a child to an entity"],["Added","A filter on a component that only retains results added after the system last ran."],["AmbientLight","An ambient light, which lights the entire scene equally."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["App","A container of app logic and data."],["AssetHandle","A wrapper around [`Handle<T>`] that also contains the [`AssetPath`] used to load the asset."],["AssetServer","Loads assets from the filesystem in the background."],["Assets","Stores Assets of a given type and tracks changes to them."],["AtomicRng","A Random Number generator, powered by the `WyRand` algorithm, but with thread-safe internal state."],["AudioChannel","Channel to play and control audio"],["AudioInstance","Asset for direct audio control"],["AudioPlugin","A Bevy plugin for audio"],["AudioSettings","This resource is used to configure the audio backend at creation"],["AudioSource","A source of audio data"],["AudioTween","A tween for audio transitions"],["Axis","Stores the position data of the input devices of type `T`."],["BVec2","A 2-dimensional boolean vector."],["BVec3","A 3-dimensional boolean vector."],["BVec4","A 4-dimensional boolean vector."],["Button","Marker struct for buttons"],["ButtonBundle","A UI node that is a button"],["CalculatedClip","The calculated clip of the node"],["CalculatedSize","The calculated size of the node"],["Camera",""],["Camera2d",""],["Camera2dBundle",""],["Camera3d","Configuration for the “main 3d render graph”."],["Camera3dBundle",""],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["Changed","A filter on a component that only retains results added or mutably dereferenced after the system last ran."],["ChildBuilder","Struct for building children onto an entity"],["Children","Contains references to the child entities of this entity"],["ClearColor","When used as a resource, sets the color that is used to clear the screen between frames."],["ColorMaterial","A 2d material that renders 2d meshes with a texture tinted by a uniform color"],["Commands","A queue of commands that get executed at the end of the stage of the system that called them."],["ComputedVisibility","Algorithmically-computed indication of whether an entity is visible and should be extracted for rendering"],["ConditionSet","Syntax sugar to apply the same conditions and/or labels to many systems"],["CurrentState","This will be available as a resource, indicating the current state"],["CursorEntered","An event that is sent whenever the user’s cursor enters a window."],["CursorLeft","An event that is sent whenever the user’s cursor leaves a window."],["CursorMoved","An event reporting that the mouse cursor has moved on a window."],["DefaultPlugins","This plugin group will add all the default plugins:"],["DefaultTaskPoolOptions","Helper for configuring and creating the default task pools. For end-users who want full control, insert the default task pools into the resource map manually. If the pools are already inserted, this helper will do nothing."],["DespawnChildrenRecursive","Despawns the given entity’s children recursively"],["DespawnRecursive","Despawns the given entity and all its children recursively"],["DirectionalLight","A Directional light."],["DirectionalLightBundle","A component bundle for [`DirectionalLight`] entities."],["DualAxis","Two directional axes combined as one input."],["DynamicAudioChannel","A dynamic channel to play and control audio"],["DynamicAudioChannels","Resource to play and control audio in dynamic channels"],["DynamicScene","A collection of serializable dynamic entities, each with its own run-time defined set of components. To spawn a dynamic scene, you can use either:"],["DynamicSceneBundle","A component bundle for a [`DynamicScene`] root."],["Entity","Lightweight identifier of an entity."],["EventReader","Reads events of type `T` in order and tracks which events have already been read."],["EventWriter","Sends events of type `T`."],["Events","An event collection that represents the events that occurred within the last two [`Events::update`] calls. Events can be written to using an [`EventWriter`] and are typically cheaply read using an [`EventReader`]."],["FixedTimestepStage","A Stage that runs a number of child stages with a fixed timestep"],["FixedTimesteps","Resource type that allows you to get info about and to manipulate fixed timestep state"],["Font",""],["Gamepad",""],["GamepadAxis",""],["GamepadButton",""],["GamepadEvent",""],["Gamepads","Container of unique connected [`Gamepad`]s"],["GilrsPlugin",""],["GlobalTransform","Describe the position of an entity relative to the reference frame."],["Handle","A handle into a specific [`Asset`] of type `T`."],["HandleUntyped","A non-generic version of [`Handle`]."],["HierarchyPlugin","The base plugin for handling [`Parent`] and [`Children`] components"],["IVec2","A 2-dimensional vector."],["IVec3","A 3-dimensional vector."],["IVec4","A 4-dimensional vector."],["Image",""],["ImageBundle","A UI node that is an image"],["In","Wrapper type to mark a [`SystemParam`] as an input."],["Input","A “press-able” input of type `T`."],["InputManagerBundle","This [`Bundle`] allows entities to collect and interpret inputs from across input sources"],["InputManagerPlugin","A [`Plugin`] that collects `Input` from disparate sources, producing an `ActionState` that can be conveniently checked"],["InputMap","Maps from raw inputs to an input-method agnostic representation"],["InsertChildren","Command that inserts a child at a given index of a parent’s children, shifting following children back"],["Local","A system local [`SystemParam`]."],["MainTrack","Type for the default audio channel"],["Mat2","A 2x2 column major matrix."],["Mat3","A 3x3 column major matrix."],["Mat4","A 4x4 column major matrix."],["MaterialMeshBundle","A component bundle for entities with a [`Mesh`] and a [`Material`]."],["MaterialPlugin","Adds the necessary ECS resources and render logic to enable rendering entities using the given [`Material`] asset type."],["Mesh",""],["MinimalPlugins","Minimal plugin group that will add the following plugins:"],["Msaa","Configuration resource for Multi-Sample Anti-Aliasing."],["Mut","Unique mutable borrow of an entity’s component"],["Name","Component used to identify an entity. Stores a hash for faster comparisons The hash is eagerly re-computed upon each update to the name."],["NextState","When you want to change state, insert this as a resource"],["Node","Describes the size of a UI node"],["NodeBundle","The basic UI node"],["NonSend","Shared borrow of a non-[`Send`] resource."],["NonSendMut","Unique borrow of a non-[`Send`] resource."],["Or","A filter that tests if any of the given filters apply."],["OrthographicProjection",""],["ParallelCommands","An alternative to [`Commands`] that can be used in parallel contexts, such as those in `Query::par_for_each`"],["ParamSet",""],["Parent","Holds a reference to the parent entity of this entity. This component should only be present on entities that actually have a parent entity."],["PerspectiveProjection",""],["PointLight","A light that emits light in all directions from a central point."],["PointLightBundle","A component bundle for [`PointLight`] entities."],["PushChildren","Command that pushes children to the end of the entity’s children"],["Quat","A quaternion representing an orientation."],["Query","Provides scoped access to components in a [`World`]."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["ReceivedCharacter","An event that is sent whenever a window receives a character from the OS or underlying system."],["ReflectComponent","A struct used to operate on reflected [`Component`] of a type."],["ReflectDefault","A struct used to provide the default value of a type."],["ReflectDeserialize","A struct used to deserialize reflected instances of a type."],["ReflectResource","A struct used to operate on reflected [`Resource`] of a type."],["ReflectSerialize","A struct used to serialize reflected instances of a type."],["RemoveChildren","Command that removes children from an entity, and removes that child’s parent and inserts it into the previous parent component"],["RemovedComponents","A [`SystemParam`] that grants access to the entities that had their `T` [`Component`] removed."],["Res","Shared borrow of a resource."],["ResMut","Unique mutable borrow of a resource."],["Rng","A Random Number generator, powered by the `WyRand` algorithm."],["Rollback","Add this component to all entities you want to be loaded/saved on rollback. The `id` has to be unique. Consider using the `RollbackIdProvider` resource."],["RollbackIdProvider","Provides unique ids for your Rollback components. When you add the GGRS Plugin, this should be available as a resource."],["RunCriteria",""],["Scene","To spawn a scene, you can use either:"],["SceneBundle","A component bundle for a [`Scene`] root."],["SceneSpawner",""],["Schedule","A container of [`Stage`]s set to be run in a linear order."],["Shader","A shader, as defined by its [`ShaderSource`] and `ShaderStage` This is an “unprocessed” shader. It can contain preprocessor directives."],["SingleAxis","A single directional axis with a configurable trigger zone."],["Size","A 2-dimensional area defined by a width and height."],["SpatialBundle","A [`Bundle`] with the following `Component`s:"],["SpotLight","A light that emits light in a given direction from a central point. Behaves like a point light in a perfectly absorbant housing that shines light only in a given direction. The direction is taken from the transform, and can be specified with `Transform::looking_at`."],["SpotLightBundle","A component bundle for spot light entities"],["Sprite",""],["SpriteBundle",""],["SpriteSheetBundle","A Bundle of components for drawing a single sprite from a sprite sheet (also referred to as a `TextureAtlas`)"],["StandardMaterial","A material with “standard” properties used in PBR lighting Standard property values with pictures here https://google.github.io/filament/Material%20Properties.pdf."],["StartupSchedule","The label for the startup `Schedule`, which runs once at the beginning of the [`App`]."],["State","Stack based state machine"],["StateTransitionStage","This stage serves as the “driver” for states of a given type"],["Style","Describes the style of a UI node"],["SystemSet","A builder for describing several systems at the same time."],["SystemStage","Stores and executes systems. Execution order is not defined unless explicitly specified; see `SystemDescriptor` documentation."],["Text",""],["Text2dBundle","The bundle of components needed to draw text in a 2D scene via a 2D `Camera2dBundle`. Example usage."],["TextAlignment",""],["TextBundle","A UI node that is text"],["TextSection",""],["TextStyle",""],["TextureAtlas","An atlas containing multiple textures (like a spritesheet or a tilemap). Example usage animating sprite. Example usage loading sprite sheet."],["TextureAtlasBuilder","A builder which is used to create a texture atlas from many individual sprites."],["TextureAtlasSprite",""],["Time","Tracks elapsed time since the last update and since the App has started"],["Timer","Tracks elapsed time. Enters the finished state once `duration` is reached."],["ToggleActions","Controls whether or not the `ActionState` / `InputMap` pairs of type `A` are active"],["TouchInput","A touch input event."],["Touches","A collection of [`Touch`]es."],["Transform","Describe the position of an entity. If the entity has a parent, the position is relative to its parent position."],["TransformBundle","A [`Bundle`] of the [`Transform`] and [`GlobalTransform`] `Component`s, which describe the position of an entity."],["TransformPlugin","The base plugin for handling [`Transform`] components"],["UVec2","A 2-dimensional vector."],["UVec3","A 3-dimensional vector."],["UVec4","A 4-dimensional vector."],["UiCameraConfig","Configuration for cameras related to UI."],["UiColor","The color of the node"],["UiImage","The image of the node"],["UiRect","A type which is commonly used to define positions, margins, paddings and borders."],["Vec2","A 2-dimensional vector."],["Vec3","A 3-dimensional vector."],["Vec4","A 4-dimensional vector with SIMD support."],["VirtualDPad","A virtual DPad that you can get an [`AxisPair`] from"],["Visibility","User indication of whether an entity is visible. Propagates down the entity hierarchy. If an entity is hidden in this way,  all [`Children`] (and all of their children and so on) will also be hidden. This is done by setting the values of their [`ComputedVisibility`] component."],["VisibilityBundle","A [`Bundle`] of the [`Visibility`] and [`ComputedVisibility`] `Component`s, which describe the visibility of an entity."],["Window","An operating system window that can present content and receive user input."],["WindowDescriptor","Describes the information needed for creating a window."],["WindowMoved","An event that is sent when a window is repositioned in physical pixels."],["Windows","A collection of [`Window`]s with unique [`WindowId`]s."],["With","Filter that selects entities with a component `T`."],["Without","Filter that selects entities without a component `T`."],["World","Stores and exposes operations on entities, components, resources, and their associated metadata."],["WorldChildBuilder","Struct for adding children to an entity directly through the [`World`] for use in exclusive systems"]],"trait":[["Actionlike","Allows a type to be used as a gameplay action in an input-agnostic fashion"],["AddAsset","[`App`] extension methods for adding new asset types."],["AddConditionalToSet","Helper trait to make syntax for adding systems to [`ConditionSystemSet`] nicer"],["AmbiguitySetLabel","A strongly-typed class of labels used to identify sets of systems with intentionally ambiguous execution order."],["AppLooplessFixedTimestepExt","Extension trait with the methods to add to Bevy’s `App`"],["AppLooplessStateExt","Extension trait with the methods to add to Bevy’s `App`"],["AudioApp","Extension trait to add new audio channels to the application"],["AudioControl","Play and control audio"],["AudioInstanceAssetsExt","Extension trait to remove some boilerplate when"],["BuildChildren","Trait defining how to build children"],["BuildWorldChildren","Trait that defines adding children to an entity directly through the [`World`]"],["Bundle","An ordered collection of [`Component`]s."],["Component","A data type that can be used to store data for an entity."],["ConditionHelpers","Trait to help impl the default helper methods we provide for systems/sets"],["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["DespawnRecursiveExt","Trait that holds functions for despawning recursively down the transform hierarchy"],["DetectChanges","Types that implement reliable change detection."],["ExclusiveSystemDescriptorCoercion",""],["ForkableCore","Trait for enabling creating new [`TurboCore`] instances from an original instance. Similar to cloning, except forking modifies the state of the original instance in order to provide a new, random state for the forked instance. This allows for creating many randomised instances from a single seed in a deterministic manner."],["FromWorld","Creates an instance of the type this trait is implemented for using data from the supplied [World]."],["GenCore","This trait provides the means to easily generate all integer types, provided the main method underpinning this is implemented: [`GenCore::gen`]. Once implemented, the rest of the trait provides default implementations for generating all integer types, though it is not recommended to override these."],["GetField","A convenience trait which combines fetching and downcasting of struct fields."],["GetTupleStructField","A convenience trait which combines fetching and downcasting of tuple struct fields."],["IntoChainSystem","An extension trait providing the [`IntoChainSystem::chain`] method for convenient [`System`] chaining."],["IntoConditionalExclusiveSystem","Extension trait for conditional exclusive systems"],["IntoConditionalSystem","Extension trait allowing any system to be converted into a `ConditionalSystem`"],["IntoExclusiveSystem",""],["IntoSystem","Conversion trait to turn something into a [`System`]."],["Material","Materials are used alongside [`MaterialPlugin`] and `MaterialMeshBundle` to spawn entities that are rendered with a specific [`Material`] type. They serve as an easy to use high level way to render [`Mesh`] entities with custom shader logic."],["MockInput","Send fake input events for testing purposes"],["ParallelSystemDescriptorCoercion",""],["Plugin","A collection of Bevy app logic and configuration."],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."],["Reflect","A reflected Rust type."],["RunCriteriaDescriptorCoercion",""],["RunCriteriaLabel","A strongly-typed class of labels used to identify run criteria."],["ScheduleLooplessFixedTimestepExt","Extension trait with the methods to add to Bevy’s `Schedule`"],["ScheduleLooplessStateExt","Extension trait with the methods to add to Bevy’s `Schedule`"],["SecureCore","A marker trait to be applied to anything that implements [`TurboCore`] in order to indicate that a PRNG source is cryptographically secure, so being a CSPRNG."],["SeededCore","Trait for implementing Seedable PRNGs, requiring that the PRNG implements [`TurboCore`] as a baseline. Seeds must be `Sized` in order to be used as the internal state of a PRNG."],["Serialize","A data structure that can be serialized into any data format supported by Serde."],["Stage","A type that can run as a step of a `Schedule`."],["StageLabel","A strongly-typed class of labels used to identify `Stage`s."],["Struct","A reflected Rust regular struct type."],["System","An ECS system that can be added to a `Schedule`"],["SystemLabel","A strongly-typed class of labels used to identify `System`s."],["SystemParamFunction","A trait implemented for all functions that can be used as [`System`]s."],["TupleStruct","A reflected Rust tuple struct."],["TurboCore","Base trait for implementing a PRNG. Only one method must be implemented: [`TurboCore::fill_bytes`], which provides the basis for any PRNG, to fill a buffer of bytes with random data."],["TurboRand","Extension trait for automatically implementing all [`TurboRand`] methods, as long as the struct implements [`TurboCore`] & [`GenCore`]. All methods are provided as default implementations that build on top of [`TurboCore`] and [`GenCore`], and thus are not recommended to be overridden, lest you potentially change the expected outcome of the methods."]],"type":[["Audio","The default audio channel"],["AudioEasing","Different kinds of easing for fade-in and fade-out"],["ColorMesh2dBundle","A component bundle for entities with a `Mesh2dHandle` and a [`ColorMaterial`]."],["PbrBundle","A component bundle for PBR entities with a [`Mesh`] and a [`StandardMaterial`]."]]};