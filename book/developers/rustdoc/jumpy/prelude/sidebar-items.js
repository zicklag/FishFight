window.SIDEBAR_ITEMS = {"attr":[["bevy_main",""],["reflect_trait","A macro that automatically generates type data for traits, which their implementors can then register."]],"constant":[["MAX_PLAYERS","The maximum number of players per match."]],"derive":[["Actionlike",""],["BonesBevyAsset","Derive macro for the `BonesBevyAsset` trait."],["BonesBevyAssetLoad","Derive macro for the `BonesBevyAssetLoad` trait."],["Bundle",""],["Component",""],["Deref","Implements `Deref` for single-item structs. This is especially useful when utilizing the newtype pattern."],["DerefMut","Implements `DerefMut` for single-item structs. This is especially useful when utilizing the newtype pattern."],["Deserialize",""],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type."],["FromReflect","Derives the `FromReflect` trait."],["Reflect","The main derive macro used by `bevy_reflect` for deriving its `Reflect` trait."],["Resource",""],["Serialize",""],["States",""],["SystemParam","Implement `SystemParam` to use a struct as a parameter in a system"],["SystemSet","Derive macro generating an impl of the trait `SystemSet`."],["TypeUlid","Derive macro for the `TypeUlid` trait."]],"enum":[["AssetEvent","Events that involve assets of type `T`."],["AudioCommandError","Errors that can occur when directly controlling audio"],["BuiltinElementKind","The kind of built-in"],["ClashStrategy","How should clashing inputs by handled by an [`InputMap`]?"],["Color",""],["CoreSchedule","The names of the default [`App`] schedules."],["CoreSet","The names of the default [`App`] system sets."],["CursorIcon","The icon to display for a window’s cursor."],["EditorInput","The editor inputs that a player may make."],["EulerRot","Euler rotation sequences."],["FileDragAndDrop","Events related to files being dragged and dropped on a window."],["GamepadAxisType","A type of a [`GamepadAxis`]."],["GamepadButtonType","A type of a [`GamepadButton`]."],["Ime","A Input Method Editor event."],["KeyCode","The key code of a `KeyboardInput`."],["Modifier","A keyboard modifier that combines two [`KeyCode`] values into one representation."],["MonitorSelection","Defines which monitor to use."],["MouseButton","A button on a mouse device."],["MouseWheelAxisType","The direction of motion of the mouse wheel."],["MouseWheelDirection","A buttonlike-input triggered by `MouseWheel` events"],["Msaa","Configuration resource for Multi-Sample Anti-Aliasing."],["PlaybackState","Playback status of a currently playing sound."],["Projection","A configurable [`CameraProjection`] that can select its projection type at runtime."],["QwertyScanCode","The key locations as defined by the keys on the QWERTY keyboard layout."],["StartupSet","The names of the default [`App`] startup sets, which live in [`CoreSchedule::Startup`]."],["TimerMode","Specifies [`Timer`] behavior."],["UserInput","Some combination of user input, which may cross input-mode boundaries."],["Visibility","User indication of whether an entity is visible. Propagates down the entity hierarchy."],["Volume","A change in volume of a sound."],["WindowPosition","Defines where window should be placed at on creation."]],"fn":[["any_with_component","Generates a `Condition`-satisfying closure that returns `true` if there are any entities with the given component type."],["apply_state_transition","If a new state is queued in [`NextState<S>`], this system:"],["apply_system_buffers","Instructs the executor to call `apply_buffers` on the systems that have run but not applied their buffers."],["dbg","System adapter that utilizes the [`bevy_utils::tracing::debug!`] macro to print the output of a system."],["default","An ergonomic abbreviation for [`Default::default()`] to make initializing structs easier. This is especially helpful when combined with “struct update syntax”."],["despawn_with_children_recursive","Function for despawning an entity and all its children"],["error","System adapter that utilizes the [`bevy_utils::tracing::error!`] macro to print the output of a system."],["ignore","System adapter that ignores the output of the previous system in a pipe. This is useful for fallible systems that should simply return early in case of an `Err`/`None`."],["in_state","Generates a `Condition`-satisfying closure that returns `true` if the state machine is currently in `state`."],["info","System adapter that utilizes the [`bevy_utils::tracing::info!`] macro to print system information."],["not","Generates a `Condition` that inverses the result of passed one."],["on_event","Generates a `Condition`-satisfying closure that returns `true` if there are any new events of the given type since it was last called."],["resource_added","Generates a `Condition`-satisfying closure that returns `true` if the resource of the given type has been added since the condition was last checked."],["resource_changed","Generates a `Condition`-satisfying closure that returns `true` if the resource of the given type has had its value changed since the condition was last checked."],["resource_changed_or_removed","Generates a `Condition`-satisfying closure that returns `true` if the resource of the given type has had its value changed since the condition was last checked."],["resource_equals","Generates a `Condition`-satisfying closure that returns `true` if the resource is equal to `value`."],["resource_exists","Generates a `Condition`-satisfying closure that returns `true` if the resource exists."],["resource_exists_and_changed","Generates a `Condition`-satisfying closure that returns `true` if the resource of the given type has had its value changed since the condition was last checked."],["resource_exists_and_equals","Generates a `Condition`-satisfying closure that returns `true` if the resource exists and is equal to `value`."],["resource_removed","Generates a `Condition`-satisfying closure that returns `true` if the resource of the given type has been removed since the condition was last checked."],["run_once","Generates a `Condition`-satisfying closure that returns `true` if the first time the condition is run and false every time after"],["state_changed","Generates a `Condition`-satisfying closure that returns `true` if the state machine changed state."],["state_exists","Generates a `Condition`-satisfying closure that returns `true` if the state machine exists."],["state_exists_and_equals","Generates a `Condition`-satisfying closure that returns `true` if the state machine exists and is currently in `state`."],["unwrap","System adapter that unwraps the `Ok` variant of a [`Result`]. This is useful for fallible systems that should panic in the case of an error."],["warn","System adapter that utilizes the [`bevy_utils::tracing::warn!`] macro to print the output of a system."]],"macro":[["debug","Constructs an event at the debug level."],["debug_span","Constructs a span at the debug level."],["error","Constructs an event at the error level."],["error_span","Constructs a span at the error level."],["info","Constructs an event at the info level."],["info_span","Constructs a span at the info level."],["trace","Constructs an event at the trace level."],["trace_span","Constructs a span at the trace level."],["warn","Constructs an event at the warn level."],["warn_span","Constructs a span at the warn level."]],"mod":[["bones","Bones lib prelude"],["shape","Generation for some primitive shape meshes."],["system_adapter","A collection of common adapters for piping the result of a system."]],"struct":[["ActionState","Stores the canonical input-method-agnostic representation of the inputs received"],["ActionStateDriver","A component that allows the attached entity to drive the [`ActionState`] of the associated entity"],["AddChild","Command that adds a child to an entity"],["Added","A filter on a component that only retains results added after the system last ran."],["AncestorIter","An [`Iterator`] of [`Entity`]s over the ancestors of an [`Entity`]."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["App","A container of app logic and data."],["AppTypeRegistry","The [`Resource`] that stores the [`App`]’s `TypeRegistry`."],["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["AssetPlugin","Adds support for [`Assets`] to an App."],["AssetServer","Loads assets from the filesystem in the background."],["Assets","Stores Assets of a given type and tracks changes to them."],["AudioChannel","Channel to play and control audio"],["AudioEmitter","Component for audio emitters"],["AudioInstance","Asset for direct audio control"],["AudioPlugin","A Bevy plugin for audio"],["AudioReceiver","Component for the audio receiver"],["AudioSettings","This resource is used to configure the audio backend at creation"],["AudioSource","A source of audio data"],["AudioTween","A tween for audio transitions"],["Axis","Stores the position data of the input devices of type `T`."],["BSpline","A spline interpolated continuously across the nearest four control points. The curve does not pass through any of the control points."],["BVec2","A 2-dimensional `bool` vector mask."],["BVec3","A 3-dimensional `bool` vector mask."],["BVec4","A 4-dimensional `bool` vector mask."],["BackgroundMeta",""],["Bezier","A spline composed of a series of cubic Bezier curves."],["BodyAnimationsMeta",""],["BulletMeta",""],["Camera","The defining component for camera entities, storing information about how and what to render through this camera."],["Camera2d",""],["Camera2dBundle",""],["Camera3d","Configuration for the “main 3d render graph”."],["Camera3dBundle",""],["CameraMeta",""],["CardinalSpline","A spline interpolated continuously across the nearest four control points, with the position of the curve specified at every control point and the tangents computed automatically."],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["Changed","A filter on a component that only retains results added or mutably dereferenced after the system last ran."],["ChildBuilder","Struct for building children onto an entity"],["Children","Contains references to the child entities of this entity."],["ClearChildren","Command that clear all children from an entity."],["ClearColor","A [`Resource`] that stores the color that is used to clear the screen between frames."],["ColorMaterial","A 2d material that renders 2d meshes with a texture tinted by a uniform color"],["ColorMeta",""],["Commands","A [`Command`] queue to perform impactful changes to the [`World`]."],["ComputedVisibility","Algorithmically-computed indication of whether an entity is visible and should be extracted for rendering"],["CoreConfigMeta",""],["CoreMeta",""],["CoreMetaArc","Resource containing the session’s [`CoreMeta`]."],["CoreSession","Implementation of the Jumpy match session."],["CoreSessionInfo","Information needed to start a game session."],["CubicSegment","A segment of a cubic curve, used to hold precomputed coefficients for fast interpolation."],["CursorEntered","An event that is sent whenever the user’s cursor enters a window."],["CursorLeft","An event that is sent whenever the user’s cursor leaves a window."],["CursorMoved","An event reporting that the mouse cursor has moved inside a window."],["DebugName","Convenient query for giving a human friendly name to an entity."],["DefaultPlugins","This plugin group will add all the default plugins for a Bevy application:"],["Deferred","A [`SystemParam`] that stores a buffer which gets applied to the [`World`] during `apply_system_buffers`. This is used internally by `Commands` to defer `World` mutations."],["DescendantIter","An [`Iterator`] of [`Entity`]s over the descendants of an [`Entity`]."],["DespawnChildrenRecursive","Despawns the given entity’s children recursively"],["DespawnRecursive","Despawns the given entity and all its children recursively"],["DualAxis","Two directional axes combined as one input."],["DynamicAudioChannel","A dynamic channel to play and control audio"],["DynamicAudioChannels","Resource to play and control audio in dynamic channels"],["DynamicScene","A collection of serializable dynamic entities, each with its own run-time defined set of components. To spawn a dynamic scene, you can use either:"],["DynamicSceneBuilder","A [`DynamicScene`] builder, used to build a scene from a [`World`] by extracting some entities."],["DynamicSceneBundle","A component bundle for a [`DynamicScene`] root."],["ElementEditorMeta",""],["ElementMeta",""],["ElementSpawn",""],["Entity","Lightweight identifier of an entity."],["EventReader","Reads events of type `T` in order and tracks which events have already been read."],["EventWriter","Sends events of type `T`."],["Events","An event collection that represents the events that occurred within the last two [`Events::update`] calls. Events can be written to using an [`EventWriter`] and are typically cheaply read using an [`EventReader`]."],["ExtractSchedule","Schedule which extract data from the main world and inserts it into the render world."],["FadeIn","Marker trait for tween commands that are fading in."],["FadeOut","Marker trait for tween commands that are fading out."],["FixedTime","The amount of time that must pass before the fixed timestep schedule is run again."],["Frame","A stereo audio sample."],["FrameCountPlugin","Adds frame counting functionality to Apps."],["GameSessionPlayerInfo","Info for a player in the [`CoreSessionInfo`] struct."],["Gamepad","A gamepad with an associated `ID`."],["GamepadAxis","An axis of a [`Gamepad`]."],["GamepadButton","A button of a [`Gamepad`]."],["Gamepads","A collection of connected [`Gamepad`]s."],["GilrsPlugin",""],["GlobalTransform","Describe the position of an entity relative to the reference frame."],["Handle","A handle into a specific [`Asset`] of type `T`."],["HandleUntyped","A non-generic version of [`Handle`]."],["Hermite","A spline interpolated continuously between the nearest two control points, with the position and velocity of the curve specified at both control points. This curve passes through all control points, with the specified velocity which includes direction and parametric speed."],["HierarchyPlugin","The base plugin for handling [`Parent`] and [`Children`] components"],["IVec2","A 2-dimensional vector."],["IVec3","A 3-dimensional vector."],["IVec4","A 4-dimensional vector."],["Image",""],["ImagePlugin","Adds the [`Image`] as an asset and makes sure that they are extracted and prepared for the GPU."],["In","Wrapper type to mark a [`SystemParam`] as an input."],["Input","A “press-able” input of type `T`."],["InputManagerBundle","This [`Bundle`] allows entities to collect and interpret inputs from across input sources"],["InputManagerPlugin","A [`Plugin`] that collects `Input` from disparate sources, producing an `ActionState` that can be conveniently checked"],["InputMap","Maps from raw inputs to an input-method agnostic representation"],["InsertChildren","Command that inserts a child at a given index of a parent’s children, shifting following children back"],["JumpyCoreAssetsPlugin",""],["Lazy","A value which is initialized on the first access."],["Local","A system local [`SystemParam`]."],["MainTrack","Type for the default audio channel"],["MapLayerMeta",""],["MapMeta",""],["MapTileMeta",""],["Mat2","A 2x2 column major matrix."],["Mat3","A 3x3 column major matrix."],["Mat4","A 4x4 column major matrix."],["Mesh",""],["MinimalPlugins","This plugin group will add the minimal plugins for a Bevy application:"],["Mut","Unique mutable borrow of an entity’s component"],["Name","Component used to identify an entity. Stores a hash for faster comparisons."],["NextState","The next state of [`State<S>`]."],["NonSend","Shared borrow of a non-[`Send`] resource."],["NonSendMut","Unique borrow of a non-[`Send`] resource."],["OnEnter","The label of a `Schedule` that runs whenever [`State<S>`] enters this state."],["OnExit","The label of a `Schedule` that runs whenever [`State<S>`] exits this state."],["OnUpdate","A [`SystemSet`] that will run within `CoreSet::Update` when this state is active."],["Or","A filter that tests if any of the given filters apply."],["OrthographicProjection","Project a 3D space onto a 2D surface using parallel lines, i.e., unlike [`PerspectiveProjection`], the size of objects remains the same regardless of their distance to the camera."],["ParallaxLayerMeta",""],["ParallelCommands","An alternative to [`Commands`] that can be used in parallel contexts, such as those in `Query::par_iter`"],["ParamSet","A collection of potentially conflicting [`SystemParam`]s allowed by disjoint access."],["Parent","Holds a reference to the parent entity of this entity. This component should only be present on entities that actually have a parent entity."],["PerspectiveProjection","A 3D camera projection in which distant objects appear smaller than close objects."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["PhysicsMeta",""],["PlayAudioCommand","A command for interacting with playing sound."],["PlayerBodyLayerMeta",""],["PlayerLayerMeta",""],["PlayerLayersMeta",""],["PlayerMeta",""],["PlayerSoundsMeta",""],["PlayerStatsMeta",""],["PushChildren","Command that pushes children to the end of the entity’s [`Children`]."],["Quat","A quaternion representing an orientation."],["Query","System parameter that provides selective access to the [`Component`] data stored in a [`World`]."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["Ray","A ray is an infinite line starting at `origin`, going in `direction`."],["ReceivedCharacter","An event that is sent whenever a window receives a character from the OS or underlying system."],["Rect","A rectangle defined by two opposite corners."],["Ref","Shared borrow of an entity’s component with access to change detection. Similar to [`Mut`] but is immutable and so doesn’t require unique access."],["ReflectComponent","A struct used to operate on reflected [`Component`] of a type."],["ReflectDefault","A struct used to provide the default value of a type."],["ReflectDeserialize","A struct used to deserialize reflected instances of a type."],["ReflectResource","A struct used to operate on reflected [`Resource`] of a type."],["ReflectSerialize","A struct used to serialize reflected instances of a type."],["RemoveChildren","Command that removes children from an entity, and removes that child’s parent."],["RemoveParent","Command that removes the parent of an entity, and removes that entity from the parent’s [`Children`]."],["RemovedComponents","A [`SystemParam`] that grants access to the entities that had their `T` [`Component`] removed."],["RenderLayers","Describes which rendering layers an entity belongs to."],["ReplaceChildren","Command that clear all children from an entity. And replace with the given children."],["Res","Shared borrow of a [`Resource`]."],["ResMut","Unique mutable borrow of a [`Resource`]."],["ScanCode","The scan code of a `KeyboardInput`."],["Scene","To spawn a scene, you can use either:"],["SceneBundle","A component bundle for a [`Scene`] root."],["SceneSpawner",""],["Schedule","A collection of systems, and the metadata and executor needed to run them in a certain order under certain conditions."],["Schedules","Resource that stores [`Schedule`]s mapped to [`ScheduleLabel`]s."],["Shader","A shader, as defined by its [`ShaderSource`] and `ShaderStage` This is an “unprocessed” shader. It can contain preprocessor directives."],["SingleAxis","A single directional axis with a configurable trigger zone."],["SpacialAudio","Configuration resource for spacial audio"],["SpatialBundle","A [`Bundle`] with the following `Component`s:"],["Sprite",""],["SpriteBundle",""],["SpriteSheetBundle","A Bundle of components for drawing a single sprite from a sprite sheet (also referred to as a `TextureAtlas`)"],["State","A finite-state machine whose transitions have associated schedules ([`OnEnter(state)`] and [`OnExit(state)`])."],["StaticSoundData","A piece of audio loaded into memory all at once."],["StaticSoundSettings","Settings for a static sound."],["TaskPoolOptions","Helper for configuring and creating the default task pools. For end-users who want full control, set up `TaskPoolPlugin`"],["TaskPoolPlugin","Setup of default task pools: `AsyncComputeTaskPool`, `ComputeTaskPool`, `IoTaskPool`."],["TextureAtlas","An atlas containing multiple textures (like a spritesheet or a tilemap). Example usage animating sprite. Example usage loading sprite sheet."],["TextureAtlasBuilder","A builder which is used to create a texture atlas from many individual sprites."],["TextureAtlasSprite",""],["Time","A clock that tracks how much it has advanced (and how much real time has elapsed) since its previous update and since its creation."],["Timer","Tracks elapsed time. Enters the finished state once `duration` is reached."],["ToggleActions","Controls whether or not the `ActionState` / `InputMap` pairs of type `A` are active"],["TouchInput","A touch input event."],["Touches","A collection of [`Touch`]es."],["Transform","Describe the position of an entity. If the entity has a parent, the position is relative to its parent position."],["TransformBundle","A [`Bundle`] of the [`Transform`] and [`GlobalTransform`] `Component`s, which describe the position of an entity."],["TransformPlugin","The base plugin for handling [`Transform`] components"],["TweenCommand","A command for interacting with the tweening of the playing sound."],["TypeRegistrationPlugin","Registration of default types to the `TypeRegistry` resource."],["UVec2","A 2-dimensional vector."],["UVec3","A 3-dimensional vector."],["UVec4","A 4-dimensional vector."],["ValidParentCheckPlugin","Print a warning for each `Entity` with a `T` component whose parent doesn’t have a `T` component."],["Vec2","A 2-dimensional vector."],["Vec3","A 3-dimensional vector."],["Vec4","A 4-dimensional vector with SIMD support."],["VirtualDPad","A virtual DPad that you can get an [`DualAxis`] from."],["VisibilityBundle","A [`Bundle`] of the [`Visibility`] and [`ComputedVisibility`] `Component`s, which describe the visibility of an entity."],["Window","Define how a window will be created and how it will behave."],["WindowMoved","An event that is sent when a window is repositioned in physical pixels."],["WindowPlugin","A [`Plugin`] that defines an interface for windowing support in Bevy."],["WindowResizeConstraints","The size limits on a window."],["With","Filter that selects entities with a component `T`."],["Without","Filter that selects entities without a component `T`."],["World","Stores and exposes operations on entities, components, resources, and their associated metadata."],["WorldChildBuilder","Struct for adding children to an entity directly through the [`World`] for use in exclusive systems"]],"trait":[["Actionlike","Allows a type to be used as a gameplay action in an input-agnostic fashion"],["AddAsset","[`App`] extension methods for adding new asset types."],["AudioApp","Extension trait to add new audio channels to the application"],["AudioControl","Play and control audio"],["AudioInstanceAssetsExt","Extension trait to remove some boilerplate when"],["BonesBevyAsset","Trait that may be derived to implement a Bevy asset type."],["BonesBevyAssetLoad","Trait implemented for types that may appear in the fields of a [`BonesBevyAsset`] and may need to perform aditional loading with the bevy load context."],["BuildChildren","Trait defining how to build children"],["BuildChildrenTransformExt","Collection of methods similar to [`BuildChildren`], but preserving each entity’s [`GlobalTransform`]."],["BuildWorldChildren","Trait that defines adding children to an entity directly through the [`World`]"],["Bundle","The `Bundle` trait enables insertion and removal of [`Component`]s from an entity."],["Component","A data type that can be used to store data for an entity."],["Condition","A system that determines if one or more scheduled systems should run."],["Context","Provides the `context` method for `Result`."],["CubicGenerator","Implement this on cubic splines that can generate a curve from their spline parameters."],["Deref","Used for immutable dereferencing operations, like `*v`."],["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["DespawnRecursiveExt","Trait that holds functions for despawning recursively down the transform hierarchy"],["DetectChanges","Types that can read change detection information. This change detection is controlled by [`DetectChangesMut`] types such as [`ResMut`]."],["DetectChangesMut","Types that implement reliable change detection."],["Event","A type that can be stored in an [`Events<E>`] resource You can conveniently access events using the [`EventReader`] and [`EventWriter`] system parameter."],["FromReflect","A trait that enables types to be dynamically constructed from reflected data."],["FromWorld","Creates an instance of the type this trait is implemented for using data from the supplied [World]."],["GetField","A convenience trait which combines fetching and downcasting of struct fields."],["GetTupleStructField","A convenience trait which combines fetching and downcasting of tuple struct fields."],["HierarchyQueryExt","An extension trait for [`Query`] that adds hierarchy related methods."],["IntoPipeSystem","An extension trait providing the [`IntoPipeSystem::pipe`] method to pass input from one system into the next."],["IntoSystem","Conversion trait to turn something into a [`System`]."],["IntoSystemAppConfig","Types that can be converted into a [`SystemAppConfig`]."],["IntoSystemAppConfigs","Types that can convert into [`SystemAppConfigs`]."],["IntoSystemConfig","Types that can be converted into a [`SystemConfig`]."],["IntoSystemConfigs","Types that can convert into a [`SystemConfigs`]."],["IntoSystemSet","Types that can be converted into a [`SystemSet`]."],["IntoSystemSetConfig","Types that can be converted into a [`SystemSetConfig`]."],["IntoSystemSetConfigs","Types that can convert into a [`SystemSetConfigs`]."],["MockInput","Send fake input events for testing purposes"],["Plugin","A collection of Bevy app logic and configuration."],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."],["Reflect","The core trait of `bevy_reflect`, used for accessing and modifying data dynamically."],["Resource","A type that can be inserted into a [`World`] as a singleton."],["Serialize","A data structure that can be serialized into any data format supported by Serde."],["Sound","An actively playing sound."],["SoundData","A source of audio that is loaded, but not yet playing."],["States","Types that can define world-wide states in a finite-state machine."],["Struct","A trait used to power struct-like operations via reflection."],["System","An ECS system that can be added to a `Schedule`"],["SystemParam","A parameter that can be used in a `System`."],["SystemParamFunction","A trait implemented for all functions that can be used as [`System`]s."],["SystemSet","Types that identify logical groups of systems."],["TupleStruct","A trait used to power tuple struct-like operations via reflection."],["TypeUlid","Associates a [`Ulid`] ID to a Rust type."]],"type":[["Audio","The default audio channel"],["AudioEasing","Different kinds of easing for fade-in and fade-out"],["ColorMesh2dBundle","A component bundle for entities with a `Mesh2dHandle` and a [`ColorMaterial`]."],["HashMap","A [`HashMap`][hashbrown::HashMap] implementing aHash, a high speed keyed hashing algorithm intended for use in in-memory hashmaps."],["HashSet","A [`HashSet`][hashbrown::HashSet] implementing aHash, a high speed keyed hashing algorithm intended for use in in-memory hashmaps."]]};