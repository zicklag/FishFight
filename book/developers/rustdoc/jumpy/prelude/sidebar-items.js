window.SIDEBAR_ITEMS = {"attr":[["bevy_main",""],["reflect_trait",""]],"constant":[["MAX_PLAYERS",""]],"derive":[["Actionlike",""],["BonesBevyAsset","Derive macro for the `BonesBevyAsset` trait."],["BonesBevyAssetLoad","Derive macro for the `BonesBevyAssetLoad` trait."],["Bundle",""],["Component",""],["Deref","Implements `Deref` for single-item structs. This is especially useful when utilizing the newtype pattern."],["DerefMut","Implements `DerefMut` for single-item structs. This is especially useful when utilizing the newtype pattern."],["Deserialize",""],["DynamicPlugin","Generates a dynamic plugin entry point function for the given `Plugin` type."],["FromReflect","Derives the `FromReflect` trait."],["Reflect",""],["Resource",""],["RunCriteriaLabel","Generates an impl of the `RunCriteriaLabel` trait."],["Serialize",""],["StageLabel","Generates an impl of the `StageLabel` trait."],["SystemLabel","Generates an impl of the `SystemLabel` trait."],["SystemParam","Implement `SystemParam` to use a struct as a parameter in a system"],["TypeUlid","Derive macro for the `TypeUlid` trait."]],"enum":[["AssetEvent","Events that involve assets of type `T`."],["AudioCommandError","Errors that can occur when directly controlling audio"],["BuiltinElementKind","The kind of built-in"],["ClashStrategy","How should clashing inputs by handled by an [`InputMap`]?"],["Color",""],["CoreStage","The names of the default [`App`] stages."],["CursorIcon","The icon to display for a window’s cursor."],["EditorInput","The editor inputs that a player may make."],["EulerRot","Euler rotation sequences."],["FileDragAndDrop","Events related to files being dragged and dropped on a window."],["GamepadAxisType","A type of a [`GamepadAxis`]."],["GamepadButtonType","A type of a [`GamepadButton`]."],["GamepadEventType","The data contained in a [`GamepadEvent`] or [`GamepadEventRaw`]."],["KeyCode","The key code of a `KeyboardInput`."],["Modifier","A keyboard modifier that combines two [`KeyCode`] values into one representation."],["MonitorSelection","Defines which monitor to use."],["MouseButton","A button on a mouse device."],["MouseWheelAxisType","The direction of motion of the mouse wheel."],["MouseWheelDirection","A buttonlike-input triggered by `MouseWheel` events"],["PlaybackState","Playback status of a currently playing sound."],["Projection","A configurable [`CameraProjection`] that can select its projection type at runtime."],["StartupStage","The names of the default [`App`] startup stages."],["TimerMode","Specifies [`Timer`] behavior."],["UserInput","Some combination of user input, which may cross [`Input`]-mode boundaries"],["WindowMode","Defines the way a window is displayed."],["WindowPosition","Defines where window should be placed at on creation."]],"fn":[["default","An ergonomic abbreviation for [`Default::default()`] to make initializing structs easier. This is especially helpful when combined with “struct update syntax”."],["despawn_with_children_recursive","Function for despawning an entity and all its children"]],"macro":[["debug","Constructs an event at the debug level."],["debug_span","Constructs a span at the debug level."],["error","Constructs an event at the error level."],["error_span","Constructs a span at the error level."],["info","Constructs an event at the info level."],["info_span","Constructs a span at the info level."],["trace","Constructs an event at the trace level."],["trace_span","Constructs a span at the trace level."],["warn","Constructs an event at the warn level."],["warn_span","Constructs a span at the warn level."]],"mod":[["bones","Bones lib prelude"],["shape","Generation for some primitive shape meshes."],["system_adapter","A collection of common adapters for piping the result of a system."]],"struct":[["ActionState","Stores the canonical input-method-agnostic representation of the inputs received"],["ActionStateDriver","A component that allows the attached entity to drive the [`ActionState`] of the associated entity"],["AddChild","Command that adds a child to an entity"],["Added","A filter on a component that only retains results added after the system last ran."],["AncestorIter","An [`Iterator`] of [`Entity`]s over the ancestors of an [`Entity`]."],["AnyOf","The `AnyOf` query parameter fetches entities with any of the component types included in T."],["App","A container of app logic and data."],["AppTypeRegistry","The [`Resource`] that stores the [`App`]’s `TypeRegistry`."],["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["AssetPlugin","Adds support for Assets to an App."],["AssetServer","Loads assets from the filesystem in the background."],["Assets","Stores Assets of a given type and tracks changes to them."],["AudioChannel","Channel to play and control audio"],["AudioInstance","Asset for direct audio control"],["AudioPlugin","A Bevy plugin for audio"],["AudioSettings","This resource is used to configure the audio backend at creation"],["AudioSource","A source of audio data"],["AudioTween","A tween for audio transitions"],["Axis","Stores the position data of the input devices of type `T`."],["BVec2","A 2-dimensional `bool` vector mask."],["BVec3","A 3-dimensional `bool` vector mask."],["BVec4","A 4-dimensional `bool` vector mask."],["BackgroundMeta",""],["BodyAnimationsMeta",""],["BulletMeta",""],["Camera","The defining component for camera entities, storing information about how and what to render through this camera."],["Camera2d",""],["Camera2dBundle",""],["Camera3d","Configuration for the “main 3d render graph”."],["Camera3dBundle",""],["CameraMeta",""],["ChangeTrackers","[`WorldQuery`] that tracks changes and additions for component `T`."],["Changed","A filter on a component that only retains results added or mutably dereferenced after the system last ran."],["ChildBuilder","Struct for building children onto an entity"],["Children","Contains references to the child entities of this entity."],["ClearColor","A [`Resource`] that stores the color that is used to clear the screen between frames."],["ColorMaterial","A 2d material that renders 2d meshes with a texture tinted by a uniform color"],["ColorMeta",""],["Commands","A [`Command`] queue to perform impactful changes to the [`World`]."],["ComputedVisibility","Algorithmically-computed indication of whether an entity is visible and should be extracted for rendering"],["ConditionSet","Syntax sugar to apply the same conditions and/or labels to many systems"],["CoreConfigMeta",""],["CoreMeta",""],["CoreMetaArc","Resource containing the session’s [`CoreMeta`]."],["CorePlugin","Adds core functionality to Apps."],["CurrentState","This will be available as a resource, indicating the current state"],["CursorEntered","An event that is sent whenever the user’s cursor enters a window."],["CursorLeft","An event that is sent whenever the user’s cursor leaves a window."],["CursorMoved","An event reporting that the mouse cursor has moved on a window."],["DefaultPlugins","This plugin group will add all the default plugins:"],["DescendantIter","An [`Iterator`] of [`Entity`]s over the descendants of an [`Entity`]."],["DespawnChildrenRecursive","Despawns the given entity’s children recursively"],["DespawnRecursive","Despawns the given entity and all its children recursively"],["DualAxis","Two directional axes combined as one input."],["DynamicAudioChannel","A dynamic channel to play and control audio"],["DynamicAudioChannels","Resource to play and control audio in dynamic channels"],["ElementEditorMeta",""],["ElementMeta",""],["ElementSpawn",""],["Entity","Lightweight identifier of an entity."],["EventReader","Reads events of type `T` in order and tracks which events have already been read."],["EventWriter","Sends events of type `T`."],["Events","An event collection that represents the events that occurred within the last two [`Events::update`] calls. Events can be written to using an [`EventWriter`] and are typically cheaply read using an [`EventReader`]."],["FadeIn","Marker trait for tween commands that are fading in."],["FadeOut","Marker trait for tween commands that are fading out."],["FixedTimestep","A system run criteria that enables systems or stages to run at a fixed timestep between executions."],["FixedTimestepStage","A Stage that runs a number of child stages with a fixed timestep"],["FixedTimesteps","Resource type that allows you to get info about and to manipulate fixed timestep state"],["GameSession","The implementation of a Jumpy game session."],["GameSessionInfo","Information needed to start a game session."],["GameSessionPlayerInfo",""],["Gamepad","A gamepad with an associated `ID`."],["GamepadAxis","An axis of a [`Gamepad`]."],["GamepadButton","A button of a [`Gamepad`]."],["GamepadEvent","An event of a [`Gamepad`]."],["Gamepads","A collection of connected [`Gamepad`]s."],["GilrsPlugin",""],["GlobalTransform","Describe the position of an entity relative to the reference frame."],["Handle","A handle into a specific [`Asset`] of type `T`."],["HandleUntyped","A non-generic version of [`Handle`]."],["HierarchyPlugin","The base plugin for handling [`Parent`] and [`Children`] components"],["IVec2","A 2-dimensional vector."],["IVec3","A 3-dimensional vector."],["IVec4","A 4-dimensional vector."],["Image",""],["ImagePlugin","Adds the [`Image`] as an asset and makes sure that they are extracted and prepared for the GPU."],["In","Wrapper type to mark a [`SystemParam`] as an input."],["Input","A “press-able” input of type `T`."],["InputManagerBundle","This [`Bundle`] allows entities to collect and interpret inputs from across input sources"],["InputManagerPlugin","A [`Plugin`] that collects `Input` from disparate sources, producing an `ActionState` that can be conveniently checked"],["InputMap","Maps from raw inputs to an input-method agnostic representation"],["InsertChildren","Command that inserts a child at a given index of a parent’s children, shifting following children back"],["JumpyCoreAssetsPlugin",""],["Lazy","A value which is initialized on the first access."],["Local","A system local [`SystemParam`]."],["MainTrack","Type for the default audio channel"],["MapLayerMeta",""],["MapMeta",""],["MapTileMeta",""],["Mat2","A 2x2 column major matrix."],["Mat3","A 3x3 column major matrix."],["Mat4","A 4x4 column major matrix."],["Mesh",""],["MinimalPlugins","Minimal plugin group that will add the following plugins:"],["Msaa","Configuration resource for Multi-Sample Anti-Aliasing."],["Mut","Unique mutable borrow of an entity’s component"],["Name","Component used to identify an entity. Stores a hash for faster comparisons The hash is eagerly re-computed upon each update to the name."],["NextState","When you want to change state, insert this as a resource"],["NonSend","Shared borrow of a non-[`Send`] resource."],["NonSendMut","Unique borrow of a non-[`Send`] resource."],["Or","A filter that tests if any of the given filters apply."],["OrthographicProjection",""],["ParallaxLayerMeta",""],["ParallelCommands","An alternative to [`Commands`] that can be used in parallel contexts, such as those in `Query::par_for_each`"],["ParamSet",""],["Parent","Holds a reference to the parent entity of this entity. This component should only be present on entities that actually have a parent entity."],["PerspectiveProjection","A 3D camera projection in which distant objects appear smaller than close objects."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["PhysicsMeta",""],["PlayAudioCommand","A command for interacting with playing sound."],["PlayerBodyLayerMeta",""],["PlayerLayerMeta",""],["PlayerLayersMeta",""],["PlayerMeta",""],["PlayerSoundsMeta",""],["PlayerStatsMeta",""],["PushChildren","Command that pushes children to the end of the entity’s [`Children`]."],["Quat","A quaternion representing an orientation."],["Query","System parameter that provides selective access to the [`Component`] data stored in a [`World`]."],["QueryState","Provides scoped access to a [`World`] state according to a given [`WorldQuery`] and query filter."],["Ray","A ray is an infinite line starting at `origin`, going in `direction`."],["ReceivedCharacter","An event that is sent whenever a window receives a character from the OS or underlying system."],["Rect","A rectangle defined by two opposite corners."],["ReflectComponent","A struct used to operate on reflected [`Component`] of a type."],["ReflectDefault","A struct used to provide the default value of a type."],["ReflectDeserialize","A struct used to deserialize reflected instances of a type."],["ReflectResource","A struct used to operate on reflected [`Resource`] of a type."],["ReflectSerialize","A struct used to serialize reflected instances of a type."],["RemoveChildren","Command that removes children from an entity, and removes that child’s parent."],["RemoveParent","Command that removes the parent of an entity, and removes that entity from the parent’s [`Children`]."],["RemovedComponents","A [`SystemParam`] that grants access to the entities that had their `T` [`Component`] removed."],["RenderLayers","Describes which rendering layers an entity belongs to."],["Res","Shared borrow of a [`Resource`]."],["ResMut","Unique mutable borrow of a [`Resource`]."],["RunCriteria",""],["ScanCode","The scan code of a `KeyboardInput`."],["Schedule","A container of [`Stage`]s set to be run in a linear order."],["Shader","A shader, as defined by its [`ShaderSource`] and `ShaderStage` This is an “unprocessed” shader. It can contain preprocessor directives."],["SingleAxis","A single directional axis with a configurable trigger zone."],["SpatialBundle","A [`Bundle`] with the following `Component`s:"],["Sprite",""],["SpriteBundle",""],["SpriteSheetBundle","A Bundle of components for drawing a single sprite from a sprite sheet (also referred to as a `TextureAtlas`)"],["StartupSchedule","The label for the startup `Schedule`, which runs once at the beginning of the [`App`]."],["State","Stack based state machine"],["StateTransitionStage","This stage serves as the “driver” for states of a given type"],["SystemSet","A builder for describing several systems at the same time."],["SystemStage","Stores and executes systems. Execution order is not defined unless explicitly specified; see `SystemDescriptor` documentation."],["TaskPoolOptions","Helper for configuring and creating the default task pools. For end-users who want full control, set up `CorePlugin`"],["TextureAtlas","An atlas containing multiple textures (like a spritesheet or a tilemap). Example usage animating sprite. Example usage loading sprite sheet."],["TextureAtlasBuilder","A builder which is used to create a texture atlas from many individual sprites."],["TextureAtlasSprite",""],["Time","A clock that tracks how much it has advanced (and how much real time has elapsed) since its previous update and since its creation."],["Timer","Tracks elapsed time. Enters the finished state once `duration` is reached."],["ToggleActions","Controls whether or not the `ActionState` / `InputMap` pairs of type `A` are active"],["TouchInput","A touch input event."],["Touches","A collection of [`Touch`]es."],["Transform","Describe the position of an entity. If the entity has a parent, the position is relative to its parent position."],["TransformBundle","A [`Bundle`] of the [`Transform`] and [`GlobalTransform`] `Component`s, which describe the position of an entity."],["TransformPlugin","The base plugin for handling [`Transform`] components"],["TweenCommand","A command for interacting with the tweening of the playing sound."],["UVec2","A 2-dimensional vector."],["UVec3","A 3-dimensional vector."],["UVec4","A 4-dimensional vector."],["ValidParentCheckPlugin","Print a warning for each `Entity` with a `T` component whose parent doesn’t have a `T` component."],["Vec2","A 2-dimensional vector."],["Vec3","A 3-dimensional vector."],["Vec4","A 4-dimensional vector with SIMD support."],["VirtualDPad","A virtual DPad that you can get an [`AxisPair`] from"],["Visibility","User indication of whether an entity is visible. Propagates down the entity hierarchy. If an entity is hidden in this way,  all [`Children`] (and all of their children and so on) will also be hidden. This is done by setting the values of their [`ComputedVisibility`] component."],["VisibilityBundle","A [`Bundle`] of the [`Visibility`] and [`ComputedVisibility`] `Component`s, which describe the visibility of an entity."],["Window","An operating system window that can present content and receive user input."],["WindowDescriptor","Describes the information needed for creating a window."],["WindowMoved","An event that is sent when a window is repositioned in physical pixels."],["WindowPlugin","A [`Plugin`] that defines an interface for windowing support in Bevy."],["Windows","A collection of [`Window`]s with unique [`WindowId`]s."],["With","Filter that selects entities with a component `T`."],["Without","Filter that selects entities without a component `T`."],["World","Stores and exposes operations on entities, components, resources, and their associated metadata."],["WorldChildBuilder","Struct for adding children to an entity directly through the [`World`] for use in exclusive systems"]],"trait":[["Actionlike","Allows a type to be used as a gameplay action in an input-agnostic fashion"],["AddAsset","[`App`] extension methods for adding new asset types."],["AddConditionalToSet","Helper trait to make syntax for adding systems to [`ConditionSystemSet`] nicer"],["AppLooplessFixedTimestepExt","Extension trait with the methods to add to Bevy’s `App`"],["AppLooplessStateExt","Extension trait with the methods to add to Bevy’s `App`"],["AudioApp","Extension trait to add new audio channels to the application"],["AudioControl","Play and control audio"],["AudioInstanceAssetsExt","Extension trait to remove some boilerplate when"],["BonesBevyAsset","Trait that may be derived to implement a Bevy asset type."],["BonesBevyAssetLoad","Trait implemented for types that may appear in the fields of a [`BonesBevyAsset`] and may need to perform aditional loading with the bevy load context."],["BuildChildren","Trait defining how to build children"],["BuildWorldChildren","Trait that defines adding children to an entity directly through the [`World`]"],["Bundle","The `Bundle` trait enables insertion and removal of [`Component`]s from an entity."],["Component","A data type that can be used to store data for an entity."],["ConditionHelpers","Trait to help impl the default helper methods we provide for systems/sets"],["Deref","Used for immutable dereferencing operations, like `*v`."],["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["DespawnRecursiveExt","Trait that holds functions for despawning recursively down the transform hierarchy"],["DetectChanges","Types that implement reliable change detection."],["FromReflect","A trait for types which can be constructed from a reflected type."],["FromWorld","Creates an instance of the type this trait is implemented for using data from the supplied [World]."],["GetField","A convenience trait which combines fetching and downcasting of struct fields."],["GetTupleStructField","A convenience trait which combines fetching and downcasting of tuple struct fields."],["HierarchyQueryExt","An extension trait for [`Query`] that adds hierarchy related methods."],["IntoConditionalSystem","Extension trait allowing any system to be converted into a `ConditionalSystem`"],["IntoPipeSystem","An extension trait providing the [`IntoPipeSystem::pipe`] method to pass input from one system into the next."],["IntoSystem","Conversion trait to turn something into a [`System`]."],["IntoSystemDescriptor",""],["MockInput","Send fake input events for testing purposes"],["Plugin","A collection of Bevy app logic and configuration."],["PluginGroup","Combines multiple [`Plugin`]s into a single unit."],["Reflect","A reflected Rust type."],["Resource","A type that can be inserted into a [`World`] as a singleton."],["RunCriteriaDescriptorCoercion",""],["RunCriteriaLabel","A strongly-typed class of labels used to identify run criteria."],["ScheduleLooplessFixedTimestepExt","Extension trait with the methods to add to Bevy’s `Schedule`"],["ScheduleLooplessStateExt","Extension trait with the methods to add to Bevy’s `Schedule`"],["Serialize","A data structure that can be serialized into any data format supported by Serde."],["Stage","A type that can run as a step of a `Schedule`."],["StageLabel","A strongly-typed class of labels used to identify `Stage`s."],["Struct","A reflected Rust regular struct type."],["System","An ECS system that can be added to a `Schedule`"],["SystemLabel","A strongly-typed class of labels used to identify `System`s."],["SystemParam","A parameter that can be used in a `System`."],["SystemParamFunction","A trait implemented for all functions that can be used as [`System`]s."],["TupleStruct","A reflected Rust tuple struct."],["TypeUlid","Associates a [`Ulid`] ID to a Rust type."]],"type":[["Audio","The default audio channel"],["AudioEasing","Different kinds of easing for fade-in and fade-out"],["ColorMesh2dBundle","A component bundle for entities with a `Mesh2dHandle` and a [`ColorMaterial`]."],["HashMap","A [`HashMap`][hashbrown::HashMap] implementing aHash, a high speed keyed hashing algorithm intended for use in in-memory hashmaps."],["HashSet","A [`HashSet`][hashbrown::HashSet] implementing aHash, a high speed keyed hashing algorithm intended for use in in-memory hashmaps."]]};